*leap.txt*	Neovim's answer to the mouse

For Neovim version 0.10.0

==============================================================================
CONTENTS                                                         *leap-contents*

  Introduction ············································· |leap-introduction|
  Usage ··························································· |leap-usage|
  Default mappings ············································· |leap-mappings|
  Custom mappings ······································· |leap-custom-mappings|
  Configuration ·················································· |leap-config|
  Highlighting ················································ |leap-highlight|
  Events ························································· |leap-events|
  Extending Leap ············································· |leap-extensions|

==============================================================================
INTRODUCTION                                  *leap* *leap.nvim* *leap-introduction*

Leap is a motion plugin that allows you to jump to any position in the visible
editor area by entering a 2-character search pattern, and then potentially a
label character to pick your target from multiple matches, similar to
vim-sneak (https://github.com/justinmk/vim-sneak). The main novel idea in Leap
is that you get a preview of the target labels - you can see which key you
will need to press before you actually need to do that, resulting in a
smoother overall experience.

==============================================================================
USAGE                                                               *leap-usage*

Note: Key mappings should be defined explicitly. To start using the plugin
with the default ones, call `require('leap').set_default_mappings()`. For
custom mappings and arrangements, see |leap-custom-mappings|.

• Initiate the search in the current window (`s`), or in the other windows
  (`S`).
• Start typing a 2-character pattern (`{char1}{char2}`).
• After typing the first character, you see "labels" appearing next to some of
  the `{char1}{?}` pairs. You cannot use the labels yet - they only get active
  after finishing the pattern. *leap-preview*
• Enter `{char2}`. If the pair was not labeled, then voilà, you're already
  there. You can safely ignore the remaining labels, and continue editing -
  those are guaranteed non-conflicting letters, disappearing on the next
  keypress (|leap.opts.safe_labels|). *leap-autojump*
• Else: type the label character, that is now active. If there are more
  matches than available labels, you can switch between groups, using
  `<space>` and `<backspace>`.

If a |language-mapping| ('keymap') is active, Leap waits for keymapped
sequences as needed and searches for the keymapped result as expected.

Special positions

A character at the end of a line can be targeted by pressing `<space>` after
it. There is no special mechanism behind this: `<space>` is simply an alias
for `\n` and `\r`, set in |leap.opts.equivalence_classes| by default.
*leap-till-eol*

A slightly more magical feature is that you can target actual EOL positions,
including empty lines, by pressing the newline alias twice (`<space><space>`).
This fulfills the principle that any visible position you can move to with the
cursor should be reachable by Leap too. *leap-to-eol* *leap-to-empty-line*

Target ordering                                           *leap-target-ordering*

When searching bidirectionally, Leap sorts matches by Euclidean (beeline)
distance from the cursor, with the exception that the current line you're on,
and on that line, forward direction is prioritized. That is, you can always be
sure that the targets right in front of you will be the first ones.

Smart autojump                                             *leap-smart-autojump*

Leap only jumps to the first match if the remaining matches can be covered by
a limited set of "safe" target labels (keys you would not use right after a
jump), but stays in place, and switches to an extended label set otherwise.
For fine-tuning or disabling this behaviour, see |leap.opts.labels| and
|leap.opts.safe_labels|.

Repeat and traversal
                                                                   *leap-repeat*
At any stage (after 0, 1, or 2 input characters), `<enter>`
(|leap.opts.special_keys.next_target|) consistently jumps to the first
available target. Pressing it right after invocation (`s<enter>`) repeats the
previous search. Pressing it after one input character (`s{char}<enter>`) can
be used as a multiline substitute for `fFtT` motions.
                                                                *leap-traversal*
If the search is directional, `<enter>` can also traverse through the rest of
the targets, moving on to the next one on each subsequent keypress
(`s<enter><enter>...`). If you overshoot, `<backspace>`
(|leap.opts.special_keys.prev_target|) can revert the jump(s).

There is a convenience function in the `user` module to set keys that behave
like |;| and |,|, that is, repeat the last motion without explicitly invoking
Leap (after that, they enter traversal mode, and behave as you would expect).
It makes sense to use `next_target` and `prev_target`, for maximum
consistency: >lua
    require('leap.user').set_repeat_keys('<enter>', '<backspace>', {
      -- If set to true, the keys will work like the native
      -- semicolon/comma, i.e., forward/backward is understood in
      -- relation to the last motion.
      relative_directions = false,
      modes = {'n', 'x', 'o'},
    })
<
Note: In case of bidirectional search, invoking repeat right away like above
might substitute for the lack of direct traversal ability.

Dot-repeat                                                     *leap-dot-repeat*

Operations can be repeated with |.|, if repeat.vim
(https://github.com/tpope/vim-repeat) is installed. Dot-repeat works as you
would expect, e.g., if you aimed for the 2nd target backwards, `.` will do the
same (the "beeline" |leap-target-ordering| is ignored).

Concealed labels                                         *leap-concealed-labels*

Labels in subsequent target groups are concealed with an empty block or a
middle dot, depending on the color scheme, and also have a dimmed color.

In |leap-preview| phase, certain labels might be concealed in the current
target group too, marking that there is a conflict or potential source of
confusion (to be resolved in the next step):

1. Two overlapping matches at window edge or EOL, where at least one of them
   is labeled. (A label beyond the edge would be shifted left a column, so
   there is no way to know which match is the owner.)
2. A label on top of another, unlabeled match. When typing quickly, this is
   in any case unsafe and unacceptable.
>
                    #1            #2
    text         ...aab|      ...abac...
    match 1         aa?|         abL          L = label
    match 2          a?|           ac         ? = potential label
    preview      ...aa█|      ...ab█c...
<
==============================================================================
MAPPINGS                                                         *leap-mappings*

To set the defaults, call `require('leap').set_default_mappings()`.

                                                        *leap_s* *leap_v_s*
                                                        *leap_o_s*
s{char1}{char2}         Jump to an occurrence of {char1}{char2} in the current
                        window. The cursor is placed on {char1} |exclusive|.
                        To operate till the end of the line, use |o_v|, and
                        finish the pattern with a newline alias, e.g.
                        `yvs{char}<space>`. |leap.opts.equivalence_classes|

                                                        *leap_S*
S{char1}{char2}         Jump to an occurrence of {char1}{char2} in one of the
                        other windows on the tab page. The cursor is placed on
                        {char1}. Works only in Normal mode.

==============================================================================
CUSTOM MAPPINGS                                            *leap-custom-mappings*

Leap defines <Plug> keys aliasing calls to |leap.leap()|. To create custom
motions different from the predefined ones, simply call the above function
with your preferred arguments. E.g., `<Plug>(leap-backward)` is just a synonym
for: >lua
    function () require('leap').leap { backward = true } end

Available <Plug> keys ~

    Key                         |  Search scope    |  Offset  |  |inclusive|
    ----------------------------|------------------|----------|-------------
    *<Plug>(leap)*                |  Current window  |          |
    *<Plug>(leap-from-window)*    |  Other windows   |          |
    *<Plug>(leap-anywhere)*       |  All windows     |          |
    *<Plug>(leap-forward)*        |  After cursor    |          |
    *<Plug>(leap-forward-to)*     |  After cursor    |  +1 (*)  |  true
    *<Plug>(leap-forward-till)*   |  After cursor    |  -1      |  true
    *<Plug>(leap-backward)*       |  Before cursor   |          |
    *<Plug>(leap-backward-to)*    |  Before cursor   |          |
    *<Plug>(leap-backward-till)*  |  Before cursor   |  +2      |

(*) Offset only in Visual and Operator-pending mode.

Suggested arrangements ~

1. Default: >lua

    vim.keymap.set({'n', 'x', 'o'}, 's', '<Plug>(leap)')
    vim.keymap.set('n',             'S', '<Plug>(leap-from-window)')

2. Jump to anywhere in Normal mode with one key: >lua

    vim.keymap.set('n',        's', '<Plug>(leap-anywhere)')
    vim.keymap.set({'x', 'o'}, 's', '<Plug>(leap)')

Trade-off: if you have multiple windows open on the tab page, you will almost
never get |leap-autojump|, except if all targets are in the same window.
(This is an intentional restriction: it would be too disorienting if the
cursor could jump in/to a different window than your goal, right before
selecting the target.)

3. Sneak-style: >lua

    vim.keymap.set({'n', 'x', 'o'}, 's',  '<Plug>(leap-forward)')
    vim.keymap.set({'n', 'x', 'o'}, 'S',  '<Plug>(leap-backward)')
    vim.keymap.set({'n', 'x', 'o'}, 'gs', '<Plug>(leap-from-window)')

4. Evil-snipe-style (https://github.com/hlissner/evil-snipe): >lua

    vim.keymap.set({'n', 'x', 'o'}, 's',  '<Plug>(leap-forward-to)')
    vim.keymap.set({'n', 'x', 'o'}, 'S',  '<Plug>(leap-backward-to)')
    vim.keymap.set({'x', 'o'},      'x',  '<Plug>(leap-forward-till)')
    vim.keymap.set({'x', 'o'},      'X',  '<Plug>(leap-backward-till)')
    vim.keymap.set({'n', 'x', 'o'}, 'gs', '<Plug>(leap-from-window)')

Note: Same-character sequences (`aaa...`) are matched at one position only: if
`offset` in |leap.leap()| is positive, at the end, otherwise at the start.

==============================================================================
CONFIGURATION                                            *leap-config* *leap.opts*

Below is the description of all configurable values in the `opts` table, with
their defaults.

Example configuration: >lua
    local leap = require('leap')
    leap.opts.case_sensitive = true
    leap.opts.special_keys.prev_target = '<s-enter>'
<
                                                      *leap.opts.case_sensitive*
`case_sensitive = false`

    Consider case in search patterns.

                                        *leap.opts.show_label_on_start_of_match*
`show_label_on_start_of_match = false`

    Display the target label on the first character of the match.
    |leap-preview|

                                                 *leap.opts.equivalence_classes*
`equivalence_classes = { ' \t\r\n' }`

    A character in search patterns will match any other in its equivalence
    class. The sets can either be defined as strings or tables.

    Example - whitespace, brackets, and quotes: >lua
        { ' \t\r\n', '([{', ')]}', '\'"`' }
<
    Note: If you want to be able to target empty lines and characters at the
    end of a line, keep an alias for `\n` and `\r`. |leap-till-eol|

    Note: Wildcard characters (non-mutual aliases) are not possible in Leap,
    for the same reason that supporting |smartcase| is not possible: we cannot
    read your mind, and decide on which label to show for |leap-preview|.
    (Generally: having any `*` -> `x|y|z` mapping, after pressing `a`, we
    either label an `ax` match as an item in the `a(x|y|z)` match list -
    pressing `*` next -, or the potentially smaller `ax` list - pressing `x`
    next -, and there is no way to know which one to choose.)

                                                      *leap.opts.preview_filter*
`preview_filter = nil`

    A function that only lets through selected matches for |leap-preview|, to
    reduce visual noise. It gets three characters as arguments: the character
    preceding the match (might be an empty string) and the matched pair
    itself. Examples: >lua

    -- Disable preview altogether.
    function () return false end

    -- Exclude whitespace and the middle of alphabetic words from preview:
    --   foobar[baaz] = quux
    --   ^----^^^--^^-^-^--^
    function (ch0, ch1, ch2)
      return not (
        ch1:match('%s') or
        ch0:match('%a') and ch1:match('%a') and ch2:match('%a')
      )
    end
<
    You can implement more involved checks here (camel case, keywords, you
    name it), but keep in mind that this function will be called for every
    single match, so efficiency is something to consider.

                                                         *leap.opts.safe_labels*
`safe_labels = 'sfnut/SFNLHMUGTZ?'`

    These should be keys that you would never use right after a jump, so that
    the plugin can instantly jump to the first match when this safe list
    covers the rest. Any other key than these "falls through" to Normal mode.
    This removes a step in the common case: you don't need to explicitly exit,
    just type your next command. |leap-autojump|

    The list can either be defined as a string or a table. Setting it to `{}`
    or `''` effectively disables the autojump feature.

    Note: Operator-pending mode ignores this, and tries to use
    |leap.opts.labels|, since we need to be able to select the actual target
    before executing the operation anyway.

                                                              *leap.opts.labels*
`labels = 'sfnjklhodweimbuyvrgtaqpcxz/SFNJKLHODWEIMBUYVRGTAQPCXZ?'`

    Target labels to be used when there are more matches than
    |leap.opts.safe_labels| plus one.

    The list can either be defined as a string or a table. Setting it to `{}`
    or `''` forces |leap-autojump| to always be on (except for
    Operator-pending mode, where it makes no sense). In this case, do not
    forget to set |leap.opts.special_keys.next_group| to something "safe" too.

A heuristic behind the default label lists: since the commands invoking the
motions are mapped to left-hand keys by default, we tend to prioritize
right-hand keys to get a better balance for the whole sequence on average.

                                                        *leap.opts.special_keys*
`special_keys =` >
    {
      next_target = '<enter>',
      prev_target = '<backspace>',
      next_group = '<space>',
      prev_group = '<backspace>',
    }

Meta-keys accepted at runtime. Each one can be a table too, with a list of
alternatives.

*leap.opts.special_keys.next_target*
Jump to the next available target (use the previous search pattern if no input
has been given). |leap-traversal|

*leap.opts.special_keys.prev_target*
Jump to the previous target (revert `next_target`).

*leap.opts.special_keys.next_group*
Shift to the next group of labeled targets.

*leap.opts.special_keys.prev_group*
Shift to the previous group of labeled targets (revert `next_group`).

Note: `<esc>` is hardcoded to exit Leap at any stage cleanly.

                                                            *leap.opts.vim_opts*
`vim_opts =` >
    {
      ['wo.scrolloff'] = 0,
      ['wo.sidescrolloff'] = 0,
      ['wo.conceallevel'] = 0,
      ['bo.modeline'] = false,
    }

Temporary |options| to be set on |LeapEnter|, and restored to their original
value upon |LeapLeave|. The keys should follow the above pattern, the prefix
corresponding to |vim.wo|, |vim.bo|, or |vim.go|.

Example - turning off |hlsearch| while leaping: >lua
    require('leap').opts.vim_opts['go.hlsearch'] = false
<
==============================================================================
HIGHLIGHTING                                                    *leap-highlight*

Leap uses the following highlight groups that you can configure to your own
liking (using |:hi| or |nvim_set_hl()|):
                                                                  *hl-LeapLabel*
LeapLabel		Target labels. Linked to |hl-IncSearch| by default.

                                                                  *hl-LeapMatch*
LeapMatch		Search matches when doing |leap-traversal| without
                        labels. Linked to |hl-Search| by default. To disable
                        match highlights: >lua
                            vim.cmd 'highlight! link LeapMatch None'
<
                                                               *hl-LeapBackdrop*
LeapBackdrop		In some cases it might be useful to apply certain
                        settings on the whole search area, like disabling
                        certain |attr-list| attributes, or linking to
                        |hl-Normal|, to make labels easier to see. This group
                        is not set by default.

To preserve your custom settings, wrap them in a function, and define an
autocommand for |ColorScheme| change: >lua

    vim.api.nvim_create_autocmd('ColorScheme', {
      callback = function ()
        -- General
        vim.cmd 'hi! link LeapMatch None'
        -- Color-scheme-specific
        if vim.g.colors_name == 'foo' then
          -- Force using the defaults of Leap:
          require('leap').init_highlight(true)
        elseif vim.g.colors_name == 'bar' then
          -- And/or make your own tweaks:
          vim.cmd 'hi! link LeapBackdrop Comment'
          vim.cmd 'hi! link LeapLabel Substitute'
        end
      end
    })

==============================================================================
EVENTS                                                             *leap-events*

The |User| event is triggered with the following patterns on entering/exiting
Leap:

*LeapEnter*
*LeapLeave*

The argument table passed to |leap.leap()| can be accessed at runtime via
`require('leap').state.args`. This lets you customize anything on a per-call
basis - just set a flag when calling |leap.leap()|: >lua

    local function leap2 ()
      require('leap').leap {
        called_leap2 = true,
        -- other arguments...
      }
    end

    vim.api.nvim_create_autocmd('User', {
      pattern = 'LeapEnter',
      callback = function (event)
        if require('leap').state.args.called_leap2 then
          -- Put some special logic here, that will only apply to leap2().
          -- You can do cleanup in an analogous LeapLeave autocommand.
        end
      end
    })

==============================================================================
EXTENDING LEAP                                                 *leap-extensions*

There is more to Leap than meets the eye. On a general level, you should think
of it as less of a motion plugin and more of an engine for selecting visible
targets on the screen (acquired by arbitrary means), and doing arbitrary things
with them.

There are lots of ways you can extend the plugin and bend it to your will, and
the combinations of them give you almost infinite possibilities.

Instead of using the provided `<Plug>` keys (|leap-custom-mappings|), you can
also call the `leap()` function directly:

leap({opts})                                                       *leap.leap()*
    Entry point for all |leap.nvim| actions.

    Parameters: ~
        {opts} Optional parameters.
               • backward: Search backward instead of forward in the current
                 window.
               • target_windows: A list of windows (as |winid|s) to be
                 searched.
               • offset: Where to land with the cursor compared to the target
                 position (-1, 0, 1, 2).
               • inclusive_op: A flag indicating whether an operation should
                 behave as |inclusive|.
               • opts: A table just like |leap.opts|, to override any default
                 setting for the specific call. Example: >lua
                    require('leap').leap {
                      opts = { safe_labels = '' }
                    }
<
                 For map-like subtables it is also enough to specify only the
                 values to be overridden: >lua
                    require('leap').leap {
                      opts = { vim_opts = { ['go.hlsearch'] = false } }
                    }
<
                                                            *leap-custom-action*
               • action: A Lua function that will be executed by Leap in place
                 of the jump, taking the selected target as its argument. (You
                 could obviously implement some custom jump logic here too.)
                                                           *leap-custom-targets*
               • targets: Either a list of targets, or a function returning
                 such a list. The advantage of the latter is that the function
                 will be evaluated after |LeapEnter| (that is, after setting
                 temporary editor options, etc.), so that you can even prompt
                 the user for input while already "in" Leap.
                 The elements of the list are tables of arbitrary structure,
                 with the only mandatory field being `pos` - a (1,1)-indexed
                 tuple; this is the position of the label, and also the jump
                 target, if there is no custom `action` provided. If you have
                 targets in multiple windows, you also need to provide a
                 `wininfo` field for each (|getwininfo()|). Targets can
                 represent anything with a position, like |treesitter| nodes,
                 etc.

==============================================================================
vim:tw=78:ts=8:ft=help:norl:
